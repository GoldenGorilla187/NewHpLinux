From e39cdd4bc651e9089cb9447178401b86b1cecac0 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 16 Sep 2021 15:27:51 +1000
Subject: [PATCH] sapi: ISpObjectToken CreateInstance support ISpAudio

---
 dlls/sapi/token.c | 276 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 276 insertions(+)

diff --git a/dlls/sapi/token.c b/dlls/sapi/token.c
index 6cc7ccd6d73..79594301c35 100644
--- a/dlls/sapi/token.c
+++ b/dlls/sapi/token.c
@@ -1221,6 +1221,276 @@ static HRESULT WINAPI token_GetCategory( ISpObjectToken *iface,
     return E_NOTIMPL;
 }
 
+struct speech_audio
+{
+    ISpAudio ISpAudio_iface;
+    LONG ref;
+};
+
+static inline struct speech_audio *impl_from_ISpAudio(ISpAudio *iface)
+{
+    return CONTAINING_RECORD(iface, struct speech_audio, ISpAudio_iface);
+}
+
+static HRESULT WINAPI spaudio_QueryInterface(ISpAudio *iface, REFIID iid, void **obj)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+
+    TRACE("(%p, %s %p).\n", audio, debugstr_guid(iid), obj);
+
+    if (IsEqualIID(iid, &IID_IUnknown) ||
+        IsEqualIID(iid, &IID_ISequentialStream) ||
+        IsEqualIID(iid, &IID_IStream) ||
+        IsEqualIID(iid, &IID_ISpStreamFormat) ||
+        IsEqualIID(iid, &IID_ISpAudio))
+        *obj = &audio->ISpAudio_iface;
+    else
+    {
+        *obj = NULL;
+        FIXME("interface %s not implemented.\n", debugstr_guid(iid));
+        return E_NOINTERFACE;
+    }
+
+    IUnknown_AddRef((IUnknown *)*obj);
+    return S_OK;
+}
+
+static ULONG WINAPI spaudio_AddRef(ISpAudio *iface)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    ULONG ref = InterlockedIncrement(&audio->ref);
+
+    TRACE("(%p): ref=%u.\n", audio, ref);
+
+    return ref;
+}
+
+static ULONG WINAPI spaudio_Release(ISpAudio *iface)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    ULONG ref = InterlockedDecrement(&audio->ref);
+
+    TRACE("(%p): ref=%u.\n", audio, ref);
+
+    if (!ref)
+    {
+        heap_free(audio);
+    }
+
+    return ref;
+}
+
+static HRESULT WINAPI spaudio_Read(ISpAudio *iface,void *pv, ULONG cb, ULONG *pcbRead)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+
+    FIXME("%p, %p, %d %p\n", audio, pv, cb, pcbRead);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_Write(ISpAudio *iface, const void *pv, ULONG cb, ULONG *pcbWritten)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+
+    FIXME("%p, %p, %d %p\n", audio, pv, cb, pcbWritten);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_Seek(ISpAudio *iface, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %s, %d, %p\n", audio, wine_dbgstr_longlong(dlibMove.QuadPart), dwOrigin, plibNewPosition);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_SetSize(ISpAudio *iface, ULARGE_INTEGER libNewSize)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("(%p, %s)\n", audio, wine_dbgstr_longlong(libNewSize.QuadPart));
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_CopyTo(ISpAudio *iface,IStream *pstm, ULARGE_INTEGER cb,
+        ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("(%p, %p, %s, %p, %p)\n", audio, pstm, wine_dbgstr_longlong(cb.QuadPart), pcbRead, pcbWritten);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_Commit(ISpAudio *iface,DWORD grfCommitFlags)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("(%p, %#x)\n", audio, grfCommitFlags);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_Revert(ISpAudio *iface)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("(%p)\n", audio);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_LockRegion(ISpAudio *iface, ULARGE_INTEGER offset, ULARGE_INTEGER cb, DWORD dwLockType)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("(%p, %s, %s, %d)\n", audio, wine_dbgstr_longlong(offset.QuadPart),
+        wine_dbgstr_longlong(cb.QuadPart), dwLockType);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_UnlockRegion(ISpAudio *iface,ULARGE_INTEGER offset, ULARGE_INTEGER cb, DWORD dwLockType)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("(%p, %s, %s, %d)\n", audio, wine_dbgstr_longlong(offset.QuadPart),
+        wine_dbgstr_longlong(cb.QuadPart), dwLockType);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_Stat(ISpAudio *iface, STATSTG *stg, DWORD flag)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p, %d\n", audio, stg, flag);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_Clone(ISpAudio *iface, IStream **ppstm)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p\n", audio, ppstm);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_GetFormat(ISpAudio *iface, GUID *format, WAVEFORMATEX **wave)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p, %p\n", audio, format, wave);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_SetState(ISpAudio *iface, SPAUDIOSTATE state, ULONGLONG reserved)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %d, %s\n", audio, state, wine_dbgstr_longlong(reserved));
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_SetFormat(ISpAudio *iface, REFGUID guid, const WAVEFORMATEX *wave)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %s, %p\n", audio, debugstr_guid(guid), wave);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_GetStatus(ISpAudio *iface, SPAUDIOSTATUS *status)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p\n", audio, status);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_SetBufferInfo(ISpAudio *iface,const SPAUDIOBUFFERINFO *buffer)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p\n", audio, buffer);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_GetBufferInfo(ISpAudio *iface, SPAUDIOBUFFERINFO *buffer)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p\n", audio, buffer);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_GetDefaultFormat(ISpAudio *iface, GUID *guid, WAVEFORMATEX **wave)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p, %p\n", audio, guid, wave);
+    return E_NOTIMPL;
+}
+
+static HANDLE WINAPI spaudio_EventHandle(ISpAudio *iface)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p\n", audio);
+    return NULL;
+}
+
+static HRESULT WINAPI spaudio_GetVolumeLevel(ISpAudio *iface, ULONG *level)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p\n", audio, level);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_SetVolumeLevel(ISpAudio *iface, ULONG level)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %d\n", audio, level);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_GetBufferNotifySize(ISpAudio *iface, ULONG *size)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %p\n", audio, size);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI spaudio_SetBufferNotifySize(ISpAudio *iface, ULONG size)
+{
+    struct speech_audio *audio = impl_from_ISpAudio(iface);
+    FIXME("%p, %d\n", audio, size);
+    return E_NOTIMPL;
+}
+
+const struct ISpAudioVtbl spaudio_vtbl =
+{
+    spaudio_QueryInterface,
+    spaudio_AddRef,
+    spaudio_Release,
+    spaudio_Read,
+    spaudio_Write,
+    spaudio_Seek,
+    spaudio_SetSize,
+    spaudio_CopyTo,
+    spaudio_Commit,
+    spaudio_Revert,
+    spaudio_LockRegion,
+    spaudio_UnlockRegion,
+    spaudio_Stat,
+    spaudio_Clone,
+    spaudio_GetFormat,
+    spaudio_SetState,
+    spaudio_SetFormat,
+    spaudio_GetStatus,
+    spaudio_SetBufferInfo,
+    spaudio_GetBufferInfo,
+    spaudio_GetDefaultFormat,
+    spaudio_EventHandle,
+    spaudio_GetVolumeLevel,
+    spaudio_SetVolumeLevel,
+    spaudio_GetBufferNotifySize,
+    spaudio_SetBufferNotifySize
+};
+
+static HRESULT speech_audio_create(void **obj)
+{
+    struct speech_audio *This = heap_alloc(sizeof(*This));
+
+    if (!This)
+        return E_OUTOFMEMORY;
+    This->ISpAudio_iface.lpVtbl = &spaudio_vtbl;
+    This->ref = 1;
+
+    *obj = &This->ISpAudio_iface;
+    return S_OK;
+}
+
 static HRESULT WINAPI token_CreateInstance( ISpObjectToken *iface,
                                             IUnknown *outer,
                                             DWORD class_context,
@@ -1235,6 +1505,12 @@ static HRESULT WINAPI token_CreateInstance( ISpObjectToken *iface,
 
     TRACE( "%p, %p, %#lx, %s, %p\n", iface, outer, class_context, debugstr_guid( riid ), object );
 
+    /* Ubtil the Enum class is implemented correctly. */
+    if (IsEqualIID(riid, &IID_ISpAudio))
+    {
+        return speech_audio_create(object);
+    }
+
     if (FAILED(hr = ISpObjectToken_GetStringValue( iface, L"CLSID", &clsid_str )))
         return hr;
 
-- 
2.40.1

