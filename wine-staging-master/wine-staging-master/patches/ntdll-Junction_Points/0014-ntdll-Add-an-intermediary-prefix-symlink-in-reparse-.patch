From f3234130493d1d99545a46e262646c1486e9de86 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@wine-staging.com>
Date: Sat, 6 Feb 2021 16:16:17 -0700
Subject: ntdll: Add an intermediary prefix symlink in reparse point metadata.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/ntdll/unix/file.c | 39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 980251b8bbf..f298b1f7a6c 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -3545,6 +3545,18 @@ static NTSTATUS get_reparse_target( UNICODE_STRING *nt_target, REPARSE_DATA_BUFF
 }
 
 
+int find_prefix_end( const char *path, int *offset )
+{
+    static int config_dir_len = 0;
+
+    if (!config_dir_len) config_dir_len = strlen(config_dir);
+    if (path[config_dir_len] != '/') return FALSE;
+    if (strncmp( config_dir, path, config_dir_len ) != 0) return FALSE;
+    *offset = config_dir_len;
+    return TRUE;
+}
+
+
 /* add a symlink to the unix target at the last point of the reparse point metadata */
 NTSTATUS create_reparse_target( int dirfd, const char *unix_src, int depth, const char *link_path,
                                 REPARSE_DATA_BUFFER *buffer )
@@ -3639,6 +3651,8 @@ NTSTATUS create_reparse_target( int dirfd, const char *unix_src, int depth, cons
     /* create the symlink to the target at the last metadata location */
     if (status == STATUS_SUCCESS || status == STATUS_NO_SUCH_FILE)
     {
+        const char prefix_string[] = "${WINEPREFIX}";
+        int append_prefix = FALSE;
         int relative_offset;
 
         target_path[0] = 0;
@@ -3648,8 +3662,21 @@ NTSTATUS create_reparse_target( int dirfd, const char *unix_src, int depth, cons
             relative_offset = 0;
             is_relative = FALSE;
         }
+        else if (find_prefix_end( unix_target, &relative_offset ))
+        {
+            char prefix_link[MAX_PATH];
+
+            append_prefix = TRUE;
+            is_relative = FALSE;
+            strcpy( prefix_link, link_path );
+            prefix_link[strlen(prefix_link)-1] = 0;
+            strcat( prefix_link, prefix_string );
+            symlink( config_dir, prefix_link );
+        }
         for (;is_relative && depth > 0; depth--)
             strcat( target_path, "../" );
+        if (append_prefix)
+            strcat( target_path, prefix_string );
         strcat( target_path, &unix_target[relative_offset] );
         TRACE( "adding reparse point target: %s\n", target_path );
         symlinkat( target_path, dirfd, link_path );
@@ -3855,6 +3882,7 @@ cleanup:
 NTSTATUS get_reparse_point_unix(const char *unix_name, REPARSE_DATA_BUFFER *buffer, ULONG *size)
 {
     char link_dir[PATH_MAX], link_path[PATH_MAX], *d;
+    const char prefix_string[] = "${WINEPREFIX}";
     int link_path_len, buffer_len, encoded_len;
     REPARSE_DATA_BUFFER header;
     ULONG out_size = *size;
@@ -3953,6 +3981,17 @@ NTSTATUS get_reparse_point_unix(const char *unix_name, REPARSE_DATA_BUFFER *buff
         link_dir_fd = fd;
     }
 
+    /* if the prefix location has moved then update the Unix prefix passthrough link */
+    strcpy( link_dir, link_path );
+    link_dir[strlen(link_dir)-1] = 0;
+    link_path_len = readlinkat( link_dir_fd, prefix_string, link_path, sizeof(link_path) );
+    if (link_path_len > 0) link_path[link_path_len] = 0;
+    if (link_path_len > 0 && strcmp( config_dir, link_path) != 0)
+    {
+        unlinkat( link_dir_fd, prefix_string, 0 );
+        symlinkat( config_dir, link_dir_fd, prefix_string );
+    }
+
     /* Decode the reparse buffer from the base64-encoded symlink data */
     *size = decode_base64url( encoded, strlen(encoded), (char*)buffer );
     status = STATUS_SUCCESS;
-- 
2.17.1

